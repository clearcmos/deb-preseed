version: '3.8'
# Staging override file that keeps your production files untouched
services:
  dns-setup:
    extends:
      file: ../dns-setup/docker-compose.yml
      service: dns-setup

  # Use production services but with staging configuration
  traefik:
    extends:
      file: ../traefik/docker-compose.yml
      service: traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ../traefik/traefik.staging.yml:/etc/traefik/traefik.yml:ro
      - ./acme.staging.json:/letsencrypt/acme.json
    command:
      # Override command completely to ensure staging server is used
      - "--log.level=INFO"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Start the acme provider
      - "--providers.acme=true"
      - "--certificatesresolvers.lestaging.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.lestaging.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.lestaging.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.lestaging.acme.httpchallenge=true"
      - "--certificatesresolvers.lestaging.acme.httpchallenge.entrypoint=web"
  
  # Include any services you want to test with staging
  authelia:
    extends:
      file: ../authelia/docker-compose.yml
      service: authelia
    depends_on:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authelia.rule=Host(`${AUTHELIA_SUBDOMAIN}.${DOMAIN}`)"
      - "traefik.http.routers.authelia.entrypoints=websecure"
      - "traefik.http.routers.authelia.tls.certresolver=lestaging"
      - "traefik.http.services.authelia.loadbalancer.server.port=9091"
      # Middleware for Traefik
      - "traefik.http.middlewares.authelia.forwardauth.address=http://authelia:9091/api/verify?rd=https://${AUTHELIA_SUBDOMAIN}.${DOMAIN}"
      - "traefik.http.middlewares.authelia.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.authelia.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Name,Remote-Email"
  
  glances:
    extends:
      file: ../glances/docker-compose.yml
      service: glances
    depends_on:
      - traefik
    labels:
      # Override any labels if needed
      - "traefik.enable=true"
      - "traefik.http.routers.glances.rule=Host(`${GLANCES_SUBDOMAIN}.${DOMAIN}`)"
      - "traefik.http.routers.glances.entrypoints=websecure"
      - "traefik.http.routers.glances.tls.certresolver=lestaging"
      - "traefik.http.services.glances.loadbalancer.server.port=61208"
      # Override to disable middleware for testing
      - "traefik.http.routers.glances.middlewares="
  
  jellyfin:
    extends:
      file: ../external-services/docker-compose.yml
      service: jellyfin-external
    depends_on:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`${JELLYFIN_SUBDOMAIN}.${DOMAIN}`)"
      - "traefik.http.routers.jellyfin.entrypoints=websecure"
      - "traefik.http.routers.jellyfin.tls=true" 
      - "traefik.http.routers.jellyfin.tls.certresolver=lestaging"
      - "traefik.http.services.jellyfin.loadbalancer.server.url=http://192.168.1.10:8096"
  
  dashboard:
    image: traefik/whoami
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`${DASHBOARD_SUBDOMAIN}.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=lestaging"
    restart: unless-stopped

networks:
  default:
    name: proxy-staging
    external: false